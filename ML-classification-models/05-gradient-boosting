# GRADIENT BOOSTING without hyperparameter tuning
from sklearn.ensemble import GradientBoostingClassifier
from sklearn import metrics

gb = GradientBoostingClassifier(random_state = 1)

gb.fit(X_train, y_train)

y_pred_gb = gb.predict(X_test)

f1_score_gb = metrics.f1_score(y_test, y_pred_gb)
precision_gb = metrics.precision_score(y_test, y_pred_gb)
recall_gb = metrics.recall_score(y_test, y_pred_gb)

print("f1_score (GB no tuning):", f1_score_gb)
print("precision (GB no tuning):", precision_gb)
print("recall (GB no tuning): ", recall_gb)


# hyperparameters tuning for GRADIENT BOOSTING using RANDOMIZED SEARCH CV
from sklearn.model_selection import RandomizedSearchCV
from scipy.stats import loguniform
from scipy.stats import randint

parameters = {
    "learning_rate": loguniform(0.01, 1),
    "n_estimators": [50, 100, 200, 400],
    "max_depth": randint(3, 10)
} 

randomCV = RandomizedSearchCV(GradientBoostingClassifier(), param_distributions = parameters, n_iter = 5, random_state = 1)

randomCV.fit(X_train, y_train)

print(randomCV.best_params_)  # {'learning_rate': 0.06824078427098831, 'max_depth': 7, 'n_estimators': 50}


# GRADIENT BOOSTING using hyperparameters from RANDOMIZED SEARCH CV
gb2 = GradientBoostingClassifier(random_state = 1, learning_rate = 0.068241, max_depth = 7)

gb2.fit(X_train, y_train)

y_pred_gb2 = gb2.predict(X_test)

f1_score_gb2 = metrics.f1_score(y_test, y_pred_gb2)
precision_gb2 = metrics.precision_score(y_test, y_pred_gb2)
recall_gb2 = metrics.recall_score(y_test, y_pred_gb2)

print("f1_score (GB randomizedCV):", f1_score_gb2)
print("precision (GB randomizedCV):", precision_gb2)
print("recall (GB randomizedCV): ", recall_gb2)


# hyperparameters tuning for GRADIENT BOOSTING using GRID SEARCH CV
from sklearn.model_selection import GridSearchCV

parameters = {
    "learning_rate": [0.01, 0.03, 0.05],
    "n_estimators": [50, 100, 200, 400],
} 

gridCV = GridSearchCV(GradientBoostingClassifier(), param_grid = parameters)

gridCV.fit(X_train, y_train)

print(gridCV.best_params_) #  {'learning_rate': 0.05, 'n_estimators': 400}


# GRADIENT BOOSTING using hyperparameters from GRID SEARCH CV
gb3 = GradientBoostingClassifier(random_state = 1, learning_rate = 0.05, n_estimators = 400)

gb3.fit(X_train, y_train)

y_pred_gb3 = gb3.predict(X_test)

f1_score_gb3 = metrics.f1_score(y_test, y_pred_gb3)
precision_gb3 = metrics.precision_score(y_test, y_pred_gb3)
recall_gb3 = metrics.recall_score(y_test, y_pred_gb3)

print("f1_score (GB gridCV):", f1_score_gb3)
print("precision (GB gridCV):", precision_gb3)
print("recall (GB gridCV): ", recall_gb3)
